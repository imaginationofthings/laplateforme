/**
* 
* In this contract, for every transaction, 30% of the tokens are actually sent to an internal fund. 
* And after every set of 50 transactions, a new user randomly might get a reward of 20% from that fund.
*
* In this version, the transfer function calculates the fund portion, decreases the sender's balance by the full amount, 
* increases the recipient's balance by the remainder, and adds the fund portion to the contract's internal fund. 
* If it's the recipient's first time receiving tokens, their address is added to the participants array. 
* After the transfer, the transaction counter increments. If it has reached 50, a user is rewarded, and the counter resets.
*
* The rewardUser function calculates the reward value (20% of the fund), subtracts it from the fund, 
* pseudo-randomly selects a participant to reward, increases their balance by the reward value, and emits a Reward event.
*/

// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.8.2 <0.9.0;

/**
 * @title Token
 * @dev An implementation of ERC 20
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */
contract Token {
    string public name = "Indulgences";
    string public symbol = "IND";
    uint8 public decimals = 18;
    uint256 public totalSupply = 100;
    uint256 public fund = 0; // Internal fund
    uint256 public transactionCount = 0; // Transaction counter

    address[] public participants; // Array to hold all participant addresses

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowances;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
    event Reward(address indexed _to, uint256 _value);

    function balanceOf(address _owner) public view returns (uint256 balance) {
        return balances[_owner];
    }

    function mint(address _owner) public {
        balances[_owner] += 10;
    }

    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value, "sorry you are poor");
        uint256 fundValue = _value * 30 / 100; // calculate 30% for the fund
        uint256 actualValue = _value - fundValue; // calculate 70% for the recipient
        balances[msg.sender] -= _value;
        balances[_to] += actualValue;
        fund += fundValue; // add to the fund
        emit Transfer(msg.sender, _to, actualValue);

        // Adding to participants array
        if (balances[_to] == actualValue){
            participants.push(_to);
        }

        transactionCount++;
        // Check if it's time to reward a user
        if(transactionCount >= 50) {
            rewardUser();
            transactionCount = 0;
        }

        return true;
    }

    function rewardUser() internal {
        require(participants.length > 0, "No participants to reward");
        uint256 rewardValue = fund * 20 / 100; // calculate 20% of the fund
        fund -= rewardValue; // subtract from the fund
        // Pseudo-randomly select a participant to reward
        uint256 randomIndex = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % participants.length;
        address recipient = participants[randomIndex];
        balances[recipient] += rewardValue;
        emit Reward(recipient, rewardValue);
    }


    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success){
        require(balances[_from] >= _value, "Insufficient balance");
        require(allowances[_from][msg.sender] >= _value || _from == msg.sender, "Insufficient allowance");
        uint256 fundValue = _value * 30 / 100; // calculate 30% for the fund
        uint256 actualValue = _value - fundValue; // calculate 70% for the recipient
        allowances[_from][msg.sender] -= _value;
        balances[_from] -= _value;
        balances[_to] += actualValue;
        fund += fundValue; // add to the fund
        emit Transfer(_from, _to, actualValue);

        // Adding to participants array
        if (balances[_to] == actualValue){
            participants.push(_to);
        }

        transactionCount++;
        // Check if it's time to reward a user
        if(transactionCount >= 50) {
            rewardUser();
            transactionCount = 0;
        }

        return true;
    }

    function approve(address _spender, uint256 _value) public returns (bool success){
       allowances[msg.sender][_spender] = _value;
       emit Approval(msg.sender, _spender, _value);
       return true;
    }

    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
        return allowances[_owner][_spender];
    }
}
